(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Cuby, Paddle, config, create, downKey, game, paddles, preload, upKey, update, updateBlue, updateOrange;

config = require("./config.coffee");

Paddle = require("./paddle.coffee");

Cuby = require("./cuby.coffee");

paddles = [];

upKey = {};

downKey = {};

preload = function() {
  console.log(':preload');
  game.load.image('paddle', 'assets/images/paddle.png');
  return game.load.image('qb', 'assets/images/qb.png');
};

create = function() {
  console.log(':create');
  game.stage.backgroundColor = config.backgroundColor;
  game.physics.startSystem(Phaser.Physics.ARCADE);
  paddles[config.colorCodes.blue] = new Paddle(game, config.colorCodes.blue);
  paddles[config.colorCodes.orange] = new Paddle(game, config.colorCodes.orange);
  upKey = game.input.keyboard.addKey(Phaser.Keyboard.W);
  return downKey = game.input.keyboard.addKey(Phaser.Keyboard.S);
};

updateBlue = function() {
  console.log(':updateBlue');
  paddles[config.colorCodes.blue].update();
  console.log('upKey' + upKey.isDown);
  if (upKey.isDown) {
    paddles[config.colorCodes.blue].move(config.dirCodes.up);
  }
  if (downKey.isDown) {
    return paddles[config.colorCodes.blue].move(config.dirCodes.down);
  }
};

updateOrange = function() {
  console.log(":updateOrange");
  return paddles[config.colorCodes.blue].update;
};

update = function() {
  console.log(':update');
  updateBlue();
  return updateOrange();
};

game = new Phaser.Game(config.screenWidth, config.screenHeight, Phaser.AUTO, '', {
  preload: preload,
  create: create,
  update: update
});


},{"./config.coffee":2,"./cuby.coffee":3,"./paddle.coffee":4}],2:[function(require,module,exports){
var config;

config = {
  backgroundColor: "#350f28",
  screenWidth: 1080,
  screenHeight: 600,
  spriteScale: 8,
  colorCodes: {
    blue: 0,
    orange: 1
  },
  dirCodes: {
    up: 0,
    down: 1
  },
  paddleSpeed: 400,
  paddleMargin: 40
};

module.exports = config;


},{}],3:[function(require,module,exports){
var Cuby, config;

config = require("./config.coffee");

Cuby = function(game, pos) {
  this.pos = pos;
  this.sprite = game.add.sprite(pos.x, pos.y, 'cuby');
  this.sprite.scale.setTo(config.spriteScale, config.spriteScale);
  game.physics.arcade.enable(this.sprite);
  this.sprite.body.velocity = new Phaser.Point(0, 0);
  this.fire = function(direction) {
    console.log("cuby fired");
    return this.sprite.body.velocity = direction;
  };
  this.trail = function(color, time) {
    return console.log("should emit");
  };
  return this;
};

module.exports = Cuby;


},{"./config.coffee":2}],4:[function(require,module,exports){
var Paddle, config;

config = require("./config.coffee");

Paddle = function(game, colorCode) {
  var x, y;
  this.colorCode = colorCode;
  x = 0;
  y = config.screenHeight / 2 - game.cache.getImage('paddle').height * config.spriteScale / 2;
  switch (colorCode) {
    case config.colorCodes.blue:
      x = config.paddleMargin;
      break;
    case config.colorCodes.orange:
      x = config.screenWidth - config.paddleMargin - game.cache.getImage('paddle').width * config.spriteScale;
  }
  this.sprite = game.add.sprite(x, y, 'paddle');
  this.sprite.scale.setTo(config.spriteScale, config.spriteScale);
  game.physics.arcade.enable(this.sprite);
  this.move = function(direction) {
    console.log("moving");
    switch (direction) {
      case config.dirCodes.up:
        return this.sprite.body.velocity = new Phaser.Point(0, -config.paddleSpeed);
      case config.dirCodes.down:
        return this.sprite.body.velocity = new Phaser.Point(0, config.paddleSpeed);
    }
  };
  this.update = function() {
    return this.sprite.body.velocity = new Phaser.Point(0, 0);
  };
  return this;
};

module.exports = Paddle;


},{"./config.coffee":2}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
